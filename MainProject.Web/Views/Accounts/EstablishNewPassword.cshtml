@model MainProject.Core.Handlers.Accounts.EstablishNewPasswordRequestHandler.EstablishNewPasswordRequest
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Establecer nueva contraseña</title>
    <environment include="Development,Production">
        <link type="image/x-icon" rel="icon" href="~/images/favicon.ico">
        <link type="text/css" href="~/css/layout/vuetify.css" rel="stylesheet" />
        <link type="text/css" href="~/css/layout/common.css" rel="stylesheet" />
    </environment>
</head>
<body>
    <div id="app" v-cloak>
        <v-app id="inspire">
            <v-content>
                <v-container fluid fill-height>
                    <v-layout align-center justify-center>
                        <v-flex xs12 sm8 md5>
                            <v-card class="elevation-12">
                                <v-toolbar dark color="primary">
                                    <v-toolbar-title>Autenticapp - Establecer nueva contraseña</v-toolbar-title>
                                    <v-spacer></v-spacer>
                                </v-toolbar>
                                <v-divider></v-divider>
                                <v-card-text>
                                    <v-form action="/accounts/establishnewpassword" method="post" v-on:submit="validateBeforeSubmit" ref="recoverAccountForm" id="recoverAccountForm">
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("ID", Context.Request.Query["ID"])
                                        @Html.Hidden("TOKEN", Context.Request.Query["TOKEN"])
                                        <v-text-field v-model.trim="credentials.email"
                                                      prepend-icon="person"
                                                      name="email"
                                                      label="email"
                                                      type="text"
                                                      :rules="[v => (!!v && utils.validateEmail(v)) || 'El campo es obligatorio']">
                                        </v-text-field>
                                        <v-text-field v-model.trim="credentials.password"
                                                      prepend-icon="lock"
                                                      name="password"
                                                      label="contraseña"
                                                      type="password"
                                                      :rules="[v => (!!v && !utils.isNullOrEmpty(v)) || 'El campo es obligatorio', v => (v && v.length >= 8) || 'La contraseña debe tener al menos ocho carateres.']">
                                        </v-text-field>
                                        <v-text-field v-model.trim="credentials.confirmedPassword"
                                                      prepend-icon="lock"
                                                      label="confirmar nueva contraseña"
                                                      type="password"
                                                      :rules="[v => (!!v && !utils.isNullOrEmpty(v)) || 'El campo es obligatorio', credentials.confirmedPassword==credentials.password || 'Las contraseñas no coinciden.']">
                                        </v-text-field>
                                    </v-form>
                                </v-card-text>
                                <v-progress-linear v-if="submit"
                                                   :indeterminate="true"
                                                   style="height:5px;margin:0px">
                                </v-progress-linear>
                                <v-divider></v-divider>
                                <v-card-actions style="padding:14px">
                                    <v-spacer></v-spacer>
                                    <v-btn flat color="green" style="background-color:aliceblue" v-bind:disabled="submit" type="submit" form="recoverAccountForm">ESTABLECER CONTRASEÑA</v-btn>
                                </v-card-actions>
                            </v-card>
                            @if (Context.Request.Method.Equals(HttpMethod.Post.Method))
                            {
                                @if (!ViewData.ModelState.IsValid)
                                {
                                    var modelStateErrors = ViewData.ModelState
                                                        .Where(x => x.Value.Errors.Count > 0)
                                                        .SelectMany(x => x.Value.Errors)
                                                        .Select(error => error.ErrorMessage);

                                    <v-card class="elevation-12" style="margin-top:5px;padding:4px">
                                        <v-alert :value="true" type="error">
                                            @foreach (var error in modelStateErrors)
                                            {
                                                <p style="margin:0px">@error</p>
                                            }
                                        </v-alert>
                                    </v-card>
                                }
                            }
                        </v-flex>
                    </v-layout>
                </v-container>
            </v-content>
        </v-app>
    </div>
    <environment include="Development,Production">
        <script type="text/javascript" src="~/js/layout/vuetify.js"></script>
        <script type="text/javascript" src="~/js/layout/common.js"></script>
    </environment>
    <script type="text/javascript">
        var mainModel = new Vue({
            el: '#app',
            data: () => ({
                utils: window.utilities,
                submit: null,
                credentials: {
                    email: @Html.RawHtmlString(Model.Email),
                    password: null,
                    confirmedPassword: null
                }
            }),
            methods: {
                validateBeforeSubmit(event) {
                    this.submit = this.$refs.recoverAccountForm.validate();
                    if (!this.submit) {
                        event.preventDefault();
                    }
                }
            }
        });
    </script>
</body>
</html>
